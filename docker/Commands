$ docker --version
$ docker info

Muestra las imagenes
$ docker images

Muestra los contenedores
$ docker ps
$ docker ps -a
$ docker ps --help
$ docker ps -l
$ docker ps -n 4
$ docker ps -a -q

Muestra las imagenes
$ docker images --help
$ docker images -a
$ docker images -a -q

Crear y ejecuta un contenedor nuevo en forma iteractiva
$ docker run -it ubuntu
root@0617fe109b46:/# uname -a

$ docker run -it --name mi_ubutu ubuntu # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu
root@a9abe5654cf0:/#

$ docker run -it --name mi_ubutu ubuntu bash # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu e inicializa el comando bash
root@a9abe5654cf0:/#

Inicializando un contenedor parado
$ docker start -i 0617fe109b46
$ docker start -i 0617

Crear contenedor en background - El contenedor esta funcionando despues de estae comando
$ docker run -d nginx

Desgargar imagen desde Docker Hub
$ docker pull ubuntu:trusty

Crea un contenedor con la imagen trusty ubuntu y entra en mod bash
$ docker run -it ubuntu:trusty bash

Elimina un contenedor
$ docker rm c611
$ docker rm heuristic_cerf


Elimina imagenes
$ docker rmi 13b6
$ docker rmi -f 7e0aa2d69a15 # Fuerza borrado aunque este asociado a una imagen

Ejecutar comandos dentro de las imagenes
$ docker exec mi_ubutu echo hola
hola

$ docker exec a9abe5654cf0  echo hola mundo
hola mundo

$ docker exec -it mi_ubutu bash
root@a9abe5654cf0:/# 

$ docker pull python # Descarga imagen de python
$ docker run -it --name mi_python python # Lanza la imagen de python con el comando python

$ docker exec -it mi_python bash 

Comandos Image
$ docker image ls
$ docker image rm -f ubuntu # Elimina una imagen

Comandos container
$ docker container ls
$ docker container ls --help

Docker Logs y Docker kills

$ docker run -d ubuntu sh -c "while true; do date; done"
$ docker logs bold_keldysh # Permite mirar lo que se esta ejecutando en el contenedor
$ docker logs d18394 --tail 10 # Permite mirar lo que se esta ejecutando en el contenedor, los últimos 10 registros


docker kill bold_keldysh # Terminar un container


Docker Top

docker top 26630210bdea
docker stats d18394251999

Docker inspect

$ docker inspect 26630210bdea

Efectua la inspacción y se envía al archivo containe1.txt
$ docker inspect 26630210bdea > containe1.txt
$ docker inspect 7c6d73bed103 > image1.txt

41. Introducción a los puertos en Docker

Presentación

42. Gestionar Puertos para acceder al contenedor. Ejemplo con
NGINX
$ docker pull nginx
$ docker images

crea el contenedor desde la imagen de nginx y expone todos los puertos publicos
$ docker run -d -P nginx

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
cbb83d45f02f   nginx     "/docker-entrypoint.…"   56 seconds ago   Up 54 seconds   0.0.0.0:32768->80/tcp   sharp_neumann


0.0.0.0:32768->80/tcp = Puede acceder por cualquier dirección ip de la máquina principal, y utilizar el puerto 32768 para acceder al puerto 80 de nginx.

http://18.188.39.91:32768/

$ docker run -d --name nginx2 -p 8080:80 nginx
$ docker ps

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
ef3b63ded848   nginx     "/docker-entrypoint.…"   3 minutes ago    Up 3 minutes    0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   16 minutes ago   Up 16 minutes   0.0.0.0:32768->80/tcp   sharp_neumann


http://18.188.39.91:8080/



















